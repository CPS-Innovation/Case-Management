trigger: none

pr:
  branches:
    include:
      - main
  paths:
    include:
      - src/ui-spa/*

pool: 'CM PreProd Pool'

variables:
  - name: nodeVersion
    value: '20.x'
  - name: workingDir
    value: src/ui-spa

stages:
  - stage: Build_and_Test_UI
    displayName: 'Build & Test UI SPA'
    jobs:
      - job: Build_and_Test
        displayName: 'Build & Test App'
        steps:
          - checkout: self
            sparseCheckoutDirectories: src/ui-spa devops-pipelines/scripts

          - task: UseNode@1
            displayName: 'Use Node.js'
            inputs:
              version: '$(nodeVersion)'

          - task: Npm@1
            displayName: 'Clean Install NPM Dependencies'
            inputs:
              command: 'ci'
              workingDir: '$(workingDir)'

          - task: Npm@1
            displayName: 'Lint Code'
            inputs:
              command: 'custom'
              customCommand: 'run lint'
              workingDir: '$(workingDir)'

          - task: Npm@1
            displayName: 'Build Web App Package'
            inputs:
              command: 'custom'
              customCommand: 'run build'
              workingDir: '$(workingDir)'
              
# ---------- UNIT TESTS (Vitest) ----------
          - task: Npm@1
            displayName: 'Run UI Unit Tests with Coverage'
            inputs:
              command: 'custom'
              customCommand: 'run unit:coverage'
              workingDir: '$(workingDir)'

          - task: PublishTestResults@2
            displayName: 'Publish Unit Test Results (JUnit)'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(workingDir)/unit-test-results.xml'
              publishRunAttachments: false
            condition: always()
          
          - task: UseDotNet@2
            displayName: 'Use .NET SDK to publish Code Coverage'
            inputs:
              packageType: 'sdk'
              version: '8.x'

          - script: |
              export PATH="$PATH:$HOME/.dotnet/tools"
              
              if ! dotnet reportgenerator --version &> /dev/null; then
                dotnet tool install --global dotnet-reportgenerator-globaltool
              fi

              reportgenerator \
                -reports:"$(covDir)/unit/cobertura-coverage.xml" \
                -targetdir:"$(covDir)/unit" \
                -reporttypes:"HtmlInline_AzurePipelines"
            displayName: 'Generate Unit HTML Coverage Report'
            workingDirectory: '$(workingDir)'
          
          - publish: '$(workingDir)/$(covDir)/unit/index.html'
            artifact: 'unit-coverage-report'
            displayName: 'Publish Unit Test Coverage Report as Pipeline Artifact'

# ---------- INTEGRATION TESTS (Playwright) ----------
          - task: Npm@1
            displayName: 'Install Playwright Browsers'
            inputs:
              command: 'custom'
              customCommand: 'exec playwright install -- --with-deps'
              workingDir: '$(workingDir)'

          - task: Npm@1
            displayName: 'Run Integration Tests with Coverage'
            inputs:
              command: 'custom'
              customCommand: 'run integration:coverage:cobertura'
              workingDir: '$(workingDir)'
          
          - task: PublishTestResults@2
            displayName: 'Publish integration Test Results (JUnit)'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '$(workingDir)/integration-test-results.xml'
              publishRunAttachments: false
            condition: always()

          - script: |
              export PATH="$PATH:$HOME/.dotnet/tools"

              reportgenerator \
                -reports:"$(covDir)/integration/cobertura-coverage.xml" \
                -targetdir:"$(covDir)/integration" \
                -reporttypes:"HtmlInline_AzurePipelines"
            displayName: 'Generate integration HTML Coverage Report'
            workingDirectory: '$(workingDir)'

          - publish: '$(workingDir)/$(covDir)/integration/index.html'
            artifact: 'integration-coverage-report'
            displayName: 'Publish integration Coverage Report as Pipeline Artifact'
          
          - script: |
              export PATH="$PATH:$HOME/.dotnet/tools"

              reportgenerator \
                -reports:"$(covDir)/unit/cobertura-coverage.xml;$(covDir)/integration/cobertura-coverage.xml" \
                -targetdir:"$(covDir)/merged" \
                -reporttypes:"Cobertura"
            displayName: 'Generate Combined Coverage Report'
            workingDirectory: '$(workingDir)'

          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Combined Code Coverage'
            inputs:
              summaryFileLocation: '$(workingDir)/$(covDir)/merged/Cobertura.xml'
              failIfCoverageEmpty: true