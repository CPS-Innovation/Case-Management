parameters:
  projectPath: ''
  projectName: ''
  buildConfiguration: 'Release'
  dotNetVersion: '8.x'
  publishOutput: false
  runTests: false
  testResultsDirectory: ''

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET SDK'
    inputs:
      packageType: 'sdk'
      version: ${{ parameters.dotNetVersion }}

  # Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore ${{ parameters.projectName }}'
    inputs:
      command: 'restore'
      projects: '${{ parameters.projectPath }}'
      nugetConfigPath: '$(Build.SourcesDirectory)/src/backend/nuget.config'
      feedsToUse: 'config'

  # Build project
  - task: DotNetCoreCLI@2
    displayName: 'Build ${{ parameters.projectName }}'
    inputs:
      command: 'build'
      projects: '${{ parameters.projectPath }}'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

  # Run tests if enabled
  - ${{ if eq(parameters.runTests, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '${{ parameters.projectPath }}'
        arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --collect:"XPlat Code Coverage;Format=cobertura" --settings src/tests/CodeCoverage.runsettings'
        publishTestResults: true
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        testRunTitle: '${{ parameters.projectName }} Tests'
        workingDirectory: '$(Build.SourcesDirectory)'
        resultsDirectory: '${{ parameters.testResultsDirectory }}'

    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage'
      inputs:
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        failIfCoverageEmpty: true
      condition: succeededOrFailed()

  # Publish if enabled
  - ${{ if eq(parameters.publishOutput, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Publish ${{ parameters.projectName }}'
      inputs:
        command: 'publish'
        projects: '${{ parameters.projectPath }}'
        publishWebProjects: false
        arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/${{ parameters.projectName }} --no-restore --self-contained false /p:PublishReadyToRun=false /p:SourceRevisionId=$(Build.SourceVersion)'

    - publish: '$(Build.ArtifactStagingDirectory)/${{ parameters.projectName }}'
      artifact: '${{ parameters.projectName }}' 
      displayName: 'Publish ${{ parameters.projectName }} Artifact'   